# compose file suitable for running CITE tests in a local dev environment
# This is meant to emulate the conditions found on pygeoapi's CI

# initialization:
#
# 0 - Navigate to the root of the pygeoapi repo
#
# 1 - Stand up this stack:
# docker compose -f tests/cite/compose.test-cite.yaml up --detach
#
# 2 - Bootstrap the teamengine service, basically create a user for running tests)
# ./tests/cite/bootstrap-teamengine.sh
#
# 3 - Access the teamengine GUI at http://localhost:8080/teamengine and login
# with:
#    - user: teamengine
#    - password: tester
#
# 4 - Use the teamengine GUI to run tests suite(s)



name: pygeoapi-cite

services:

  pygeoapi:
    image: 'ghcr.io/geopython/pygeoapi:${CURRENT_GIT_BRANCH:-latest}'
    ports:
      - target: 5000
        published: 5001
    environment:
      PYGEOAPI_PORT: 5000
      PYGEOAPI_PUBLIC_URL: http://localhost:5001
      PYGEOAPI_CONFIG: /pygeoapi/tests/cite/cite.config.yml
      PYGEOAPI_OPENAPI: /pygeoapi/tests/cite/cite.openapi.yml
      PYGEOAPI_ELASTICSEARCH_SERVER_URL: http://elasticsearch-server:9200
    volumes:
      - type: bind
        source: $PWD
        target: /pygeoapi
    depends_on:
      elasticsearch-server:
        condition: service_healthy
    entrypoint: ['/bin/bash', '-c']
    command:
      - |
        pip3 install 'elasticsearch-dsl>=8.0.0,<9.0.0'
        python3 tests/load_es_data.py tests/data/ne_110m_populated_places_simple.geojson geonameid
        python3 tests/load_es_data.py tests/cite/canada-hydat-daily-mean-02HC003.geojson IDENTIFIER
        pygeoapi openapi generate /pygeoapi/tests/cite/cite.config.yml --output-file /pygeoapi/tests/cite/cite.openapi.yml
        gunicorn --bind 0.0.0.0:5000 pygeoapi.flask_app:APP

  elasticsearch-server:
    image: elasticsearch:8.12.2
    ports:
      - target: 9200
        published: 9200
      - target: 9300
        published: 9300
    environment:
      ES_JAVA_OPTS: -Xms2g -Xmx2g
      discovery.type: single-node
      xpack.security.enabled: false
      xpack.security.enrollment.enabled: false
    healthcheck:
      interval: 10s
      timeout: 3s
      start_period: 1m
      retries: 10
      test: |
        response=$$(curl --silent --write-out "%{http_code}" --output /dev/null localhost:9200)
        if [ $${response} = '200' ];
        then exit 0;
        else echo "++++++++++ elasticsearch is not ready ++++++++++"; exit 1;
        fi

  teamengine:
    image: ogccite/teamengine-production:1.0-SNAPSHOT
    # use network_mode: host in order to allow teamengine to access pygeoapi
    # at localhost:5001 - this is necessary in order to have teamengine be
    # able to follow pygeoapi URLs
    network_mode: host
