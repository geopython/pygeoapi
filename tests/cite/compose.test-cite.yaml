# docker compose file suitable for running CITE tests in both pygeoapi CI and in a local
# dev environment
#
# How to use this to run CITE tests locally:
#
# 0. install cite-runner
# pipx install cite-runner
#
# 1. Navigate to the root of the pygeoapi repo
#
# 2. Stand up this stack:
# docker compose -f tests/cite/compose.test-cite.yaml up --detach
#
# 3. Stand up a local teamengine instance
# docker run --rm --name teamengine \
#     --add-host=host.docker.internal:host-gateway \
#     --publish 9081:8080 \
#     ogccite/teamengine-production:1.0-SNAPSHOT
#
# 4. Use cite-runner to run CITE tests
# cite-runner \
#     execute-test-suite \
#     http://localhost:9081/teamengine \
#     ogcapi-features-1.0 \
#     --suite-input iut http://host.docker.internal:5001



name: pygeoapi-cite

services:

  pygeoapi:
    image: 'ghcr.io/geopython/pygeoapi:${CURRENT_GIT_BRANCH:-latest}'
    ports:
      - target: 5000
        published: 5001
    environment:
      PYGEOAPI_PORT: 5000
      PYGEOAPI_PUBLIC_URL: http://host.docker.internal:5001
      PYGEOAPI_CONFIG: /pygeoapi/tests/cite/cite.config.docker.yml
      PYGEOAPI_OPENAPI: /pygeoapi/tests/cite/cite.openapi.yml
      PYGEOAPI_ELASTICSEARCH_SERVER_URL: http://elasticsearch-server:9200
      PYGEOAPI_DATA_ROOT: /pygeoapi/tests/data
    volumes:
      - type: bind
        source: $PWD
        target: /pygeoapi
    entrypoint: ['/bin/bash', '-c']
    command:
      - |
        pip3 install -r requirements.txt
        # pip3 install 'elasticsearch-dsl>=8.0.0,<9.0.0'
        # python3 tests/load_es_data.py /pygeoapi/tests/data/ne_110m_populated_places_simple.geojson geonameid
        pip3 install -e .
        pygeoapi openapi generate /pygeoapi/tests/cite/cite.config.docker.yml --output-file /pygeoapi/tests/cite/cite.openapi.yml
        gunicorn --access-logfile - --bind 0.0.0.0:5000 pygeoapi.flask_app:APP
    healthcheck:
      interval: 10s
      timeout: 3s
      start_period: 1m
      retries: 10
      test: |
        response=$$(python3 -c 'import urllib.request; print(urllib.request.urlopen("http://localhost:5000").status)')
        if [ $${response} = '200' ];
        then exit 0;
        else echo "++++++++++ pygeoapi is not ready ++++++++++"; exit 1;
        fi
