components:
  parameters:
    bbox:
      description: Only features that have a geometry that intersects the bounding
        box are selected.The bounding box is provided as four or six numbers, depending
        on whether the coordinate reference system includes a vertical axis (height
        or depth).
      explode: false
      in: query
      name: bbox
      required: false
      schema:
        items:
          type: number
        maxItems: 6
        minItems: 4
        type: array
      style: form
    bbox-crs:
      description: Indicates the coordinate reference system for the given bbox coordinates.
      explode: false
      in: query
      name: bbox-crs
      required: false
      schema:
        format: uri
        type: string
      style: form
    bbox-crs-epsg:
      description: Indicates the EPSG for the given bbox coordinates.
      explode: false
      in: query
      name: bbox-crs
      required: false
      schema:
        default: 4326
        type: integer
      style: form
    crs:
      description: Indicates the coordinate reference system for the results.
      explode: false
      in: query
      name: crs
      required: false
      schema:
        format: uri
        type: string
      style: form
    f:
      description: The optional f parameter indicates the output format which the
        server shall provide as part of the response document.  The default format
        is GeoJSON.
      explode: false
      in: query
      name: f
      required: false
      schema:
        default: json
        enum:
        - json
        - html
        - jsonld
        type: string
      style: form
    lang:
      description: The optional lang parameter instructs the server return a response
        in a certain language, if supported.  If the language is not among the available
        values, the Accept-Language header language will be used if it is supported.
        If the header is missing, the default server language is used. Note that providers
        may only support a single language (or often no language at all), that can
        be different from the server language.  Language strings can be written in
        a complex (e.g. "fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7"), simple (e.g. "de")
        or locale-like (e.g. "de-CH" or "fr_BE") fashion.
      in: query
      name: lang
      required: false
      schema:
        default: en-US
        enum:
        - en-US
        - fr-CA
        type: string
    offset:
      description: The optional offset parameter indicates the index within the result
        set from which the server shall begin presenting results in the response document.  The
        first element has an index of 0 (default).
      explode: false
      in: query
      name: offset
      required: false
      schema:
        default: 0
        minimum: 0
        type: integer
      style: form
    properties:
      description: The properties that should be included for each feature. The parameter
        value is a comma-separated list of property names.
      explode: false
      in: query
      name: properties
      required: false
      schema:
        items:
          type: string
        type: array
      style: form
    resourceId:
      description: Configuration resource identifier
      in: path
      name: resourceId
      required: true
      schema:
        type: string
    skipGeometry:
      description: This option can be used to skip response geometries for each feature.
      explode: false
      in: query
      name: skipGeometry
      required: false
      schema:
        default: false
        type: boolean
      style: form
    vendorSpecificParameters:
      description: Additional "free-form" parameters that are not explicitly defined
      in: query
      name: vendorSpecificParameters
      schema:
        additionalProperties: true
        type: object
      style: form
  responses:
    '200':
      description: successful operation
    '204':
      description: no content
    Queryables:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/queryables'
      description: successful queryables operation
    default:
      content:
        application/json:
          schema:
            $ref: https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/exception.yaml
      description: Unexpected error
  schemas:
    queryable:
      properties:
        description:
          description: a human-readable narrative describing the queryable
          type: string
        language:
          default:
          - en
          description: the language used for the title and description
          type: string
        queryable:
          description: the token that may be used in a CQL predicate
          type: string
        title:
          description: a human readable title for the queryable
          type: string
        type:
          description: the data type of the queryable
          type: string
        type-ref:
          description: a reference to the formal definition of the type
          format: url
          type: string
      required:
      - queryable
      - type
      type: object
    queryables:
      properties:
        queryables:
          items:
            $ref: '#/components/schemas/queryable'
          type: array
      required:
      - queryables
      type: object
info:
  contact:
    email: you@example.org
    name: Organization Name
    url: https://pygeoapi.io
  description: pygeoapi provides an API to geospatial data
  license:
    name: CC-BY 4.0 license
    url: https://creativecommons.org/licenses/by/4.0/
  termsOfService: https://creativecommons.org/licenses/by/4.0/
  title: pygeoapi default instance
  version: 0.16.dev0
  x-keywords:
  - geospatial
  - data
  - api
openapi: 3.0.2
paths:
  /:
    get:
      description: Landing page
      operationId: getLandingPage
      parameters:
      - $ref: '#/components/parameters/f'
      - $ref: '#/components/parameters/lang'
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/LandingPage
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Landing page
      tags:
      - server
  /collections:
    get:
      description: Collections
      operationId: getCollections
      parameters:
      - $ref: '#/components/parameters/f'
      - $ref: '#/components/parameters/lang'
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/LandingPage
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Collections
      tags:
      - server
  /collections/canada-metadata:
    get:
      description: Sample metadata records from open.canada.ca
      operationId: describeCanada-metadataCollection
      parameters:
      - $ref: '#/components/parameters/f'
      - $ref: '#/components/parameters/lang'
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Open Canada sample data metadata
      tags:
      - canada-metadata
  /collections/canada-metadata/items:
    get:
      description: Sample metadata records from open.canada.ca
      operationId: getCanada-metadataFeatures
      parameters:
      - &id001
        description: The optional f parameter indicates the output format which the
          server shall provide as part of the response document.  The default format
          is GeoJSON.
        explode: false
        in: query
        name: f
        required: false
        schema:
          default: json
          enum:
          - json
          - html
          - jsonld
          - csv
          type: string
        style: form
      - &id002
        description: The optional lang parameter instructs the server return a response
          in a certain language, if supported.  If the language is not among the available
          values, the Accept-Language header language will be used if it is supported.
          If the header is missing, the default server language is used. Note that
          providers may only support a single language (or often no language at all),
          that can be different from the server language.  Language strings can be
          written in a complex (e.g. "fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7"), simple
          (e.g. "de") or locale-like (e.g. "de-CH" or "fr_BE") fashion.
        in: query
        name: lang
        required: false
        schema:
          default: en-US
          enum:
          - en-US
          - fr-CA
          type: string
      - $ref: '#/components/parameters/bbox'
      - $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit
      - $ref: '#/components/parameters/crs'
      - $ref: '#/components/parameters/bbox-crs'
      - description: The properties that should be included for each feature. The
          parameter value is a comma-separated list of property names.
        explode: false
        in: query
        name: properties
        required: false
        schema:
          items:
            enum:
            - created
            - updated
            - type
            - title
            - description
            - providers
            - externalIds
            - themes
            - q
            type: string
          type: array
        style: form
      - $ref: '#/components/parameters/vendorSpecificParameters'
      - $ref: '#/components/parameters/skipGeometry'
      - $ref: https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml
      - $ref: '#/components/parameters/offset'
      - $ref: https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/q.yaml
      - $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/datetime
      - explode: false
        in: query
        name: created
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: updated
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: description
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: providers
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: externalIds
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: themes
        required: false
        schema:
          type: string
        style: form
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Open Canada sample data items
      tags:
      - canada-metadata
    options:
      description: Sample metadata records from open.canada.ca
      operationId: optionsCanada-metadataFeatures
      responses:
        '200':
          description: options response
      summary: Options for Open Canada sample data items
      tags:
      - canada-metadata
  /collections/canada-metadata/items/{featureId}:
    get:
      description: Sample metadata records from open.canada.ca
      operationId: getCanada-metadataFeature
      parameters:
      - $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      - $ref: '#/components/parameters/crs'
      - $ref: '#/components/parameters/f'
      - $ref: '#/components/parameters/lang'
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Open Canada sample data item by id
      tags:
      - canada-metadata
    options:
      description: Sample metadata records from open.canada.ca
      operationId: optionsCanada-metadataFeature
      parameters:
      - $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      responses:
        '200':
          description: options response
      summary: Options for Open Canada sample data item by id
      tags:
      - canada-metadata
  /collections/canada-metadata/queryables:
    get:
      description: Sample metadata records from open.canada.ca
      operationId: getCanada-metadataQueryables
      parameters:
      - *id001
      - *id002
      responses:
        '200':
          $ref: '#/components/responses/Queryables'
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Open Canada sample data queryables
      tags:
      - canada-metadata
  /collections/gdps-temperature:
    get:
      description: Global Deterministic Prediction System sample
      operationId: describeGdps-temperatureCollection
      parameters:
      - $ref: '#/components/parameters/f'
      - $ref: '#/components/parameters/lang'
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Global Deterministic Prediction System sample metadata
      tags:
      - gdps-temperature
  /collections/gdps-temperature/coverage:
    get:
      description: Global Deterministic Prediction System sample
      operationId: getGdps-temperatureCoverage
      parameters:
      - *id001
      - *id002
      - $ref: '#/components/parameters/bbox'
      - $ref: '#/components/parameters/bbox-crs'
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Global Deterministic Prediction System sample coverage
      tags:
      - gdps-temperature
  /collections/gdps-temperature/coverage/domainset:
    get:
      description: Global Deterministic Prediction System sample
      operationId: getGdps-temperatureCoverageDomainSet
      parameters:
      - *id001
      - *id002
      responses:
        '200':
          $ref: https://raw.githubusercontent.com/tomkralidis/ogcapi-coverages-1/fix-cis/yaml-unresolved/schemas/cis_1.1/domainSet.yaml
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Global Deterministic Prediction System sample coverage domain set
      tags:
      - gdps-temperature
  /collections/gdps-temperature/coverage/rangetype:
    get:
      description: Global Deterministic Prediction System sample
      operationId: getGdps-temperatureCoverageRangeType
      parameters:
      - *id001
      - *id002
      responses:
        '200':
          $ref: https://raw.githubusercontent.com/tomkralidis/ogcapi-coverages-1/fix-cis/yaml-unresolved/schemas/cis_1.1/rangeType.yaml
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Global Deterministic Prediction System sample coverage range type
      tags:
      - gdps-temperature
  /collections/lakes:
    get:
      description: lakes of the world, public domain
      operationId: describeLakesCollection
      parameters:
      - $ref: '#/components/parameters/f'
      - $ref: '#/components/parameters/lang'
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Large Lakes metadata
      tags:
      - lakes
  /collections/lakes/items:
    get:
      description: lakes of the world, public domain
      operationId: getLakesFeatures
      parameters:
      - *id001
      - *id002
      - $ref: '#/components/parameters/bbox'
      - $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit
      - $ref: '#/components/parameters/crs'
      - $ref: '#/components/parameters/bbox-crs'
      - description: The properties that should be included for each feature. The
          parameter value is a comma-separated list of property names.
        explode: false
        in: query
        name: properties
        required: false
        schema:
          items:
            enum:
            - id
            - scalerank
            - name
            - name_alt
            - admin
            - featureclass
            type: string
          type: array
        style: form
      - $ref: '#/components/parameters/vendorSpecificParameters'
      - $ref: '#/components/parameters/skipGeometry'
      - $ref: https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml
      - $ref: '#/components/parameters/offset'
      - explode: false
        in: query
        name: id
        required: false
        schema:
          type: integer
        style: form
      - explode: false
        in: query
        name: scalerank
        required: false
        schema:
          type: integer
        style: form
      - explode: false
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: name_alt
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: admin
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: featureclass
        required: false
        schema:
          type: string
        style: form
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Large Lakes items
      tags:
      - lakes
    options:
      description: lakes of the world, public domain
      operationId: optionsLakesFeatures
      responses:
        '200':
          description: options response
      summary: Options for Large Lakes items
      tags:
      - lakes
  /collections/lakes/items/{featureId}:
    get:
      description: lakes of the world, public domain
      operationId: getLakesFeature
      parameters:
      - $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      - $ref: '#/components/parameters/crs'
      - $ref: '#/components/parameters/f'
      - $ref: '#/components/parameters/lang'
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Large Lakes item by id
      tags:
      - lakes
    options:
      description: lakes of the world, public domain
      operationId: optionsLakesFeature
      parameters:
      - $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      responses:
        '200':
          description: options response
      summary: Options for Large Lakes item by id
      tags:
      - lakes
  /collections/lakes/queryables:
    get:
      description: lakes of the world, public domain
      operationId: getLakesQueryables
      parameters:
      - *id001
      - *id002
      responses:
        '200':
          $ref: '#/components/responses/Queryables'
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Large Lakes queryables
      tags:
      - lakes
  /collections/mapserver_world_map:
    get:
      description: MapServer demo WMS world map
      operationId: describeMapserver_world_mapCollection
      parameters:
      - $ref: '#/components/parameters/f'
      - $ref: '#/components/parameters/lang'
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get MapServer demo WMS world map metadata
      tags:
      - mapserver_world_map
  /collections/mapserver_world_map/map:
    get:
      description: MapServer demo WMS world map map
      operationId: getMap
      parameters:
      - $ref: '#/components/parameters/bbox'
      - $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/datetime
      - description: Response image width
        explode: false
        in: query
        name: width
        required: false
        schema:
          type: integer
        style: form
      - description: Response image height
        explode: false
        in: query
        name: height
        required: false
        schema:
          type: integer
        style: form
      - description: Background transparency of map (default=true).
        explode: false
        in: query
        name: transparent
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - $ref: '#/components/parameters/bbox-crs-epsg'
      - description: The optional f parameter indicates the output format which the
          server shall provide as part of the response document.  The default format
          is GeoJSON.
        explode: false
        in: query
        name: f
        required: false
        schema:
          default: png
          enum:
          - png
          type: string
        style: form
      responses:
        '200':
          content:
            application/json: {}
          description: Response
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get map
      tags:
      - mapserver_world_map
  /collections/obs:
    get:
      description: My cool observations
      operationId: describeObsCollection
      parameters:
      - $ref: '#/components/parameters/f'
      - $ref: '#/components/parameters/lang'
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Observations metadata
      tags:
      - obs
  /collections/obs/items:
    get:
      description: My cool observations
      operationId: getObsFeatures
      parameters:
      - *id001
      - *id002
      - $ref: '#/components/parameters/bbox'
      - $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit
      - $ref: '#/components/parameters/crs'
      - $ref: '#/components/parameters/bbox-crs'
      - description: The properties that should be included for each feature. The
          parameter value is a comma-separated list of property names.
        explode: false
        in: query
        name: properties
        required: false
        schema:
          items:
            enum:
            - id
            - stn_id
            - datetime
            - value
            type: string
          type: array
        style: form
      - $ref: '#/components/parameters/vendorSpecificParameters'
      - $ref: '#/components/parameters/skipGeometry'
      - $ref: https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml
      - $ref: '#/components/parameters/offset'
      - explode: false
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: stn_id
        required: false
        schema:
          type: integer
        style: form
      - explode: false
        in: query
        name: datetime
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: value
        required: false
        schema:
          type: number
        style: form
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Observations items
      tags:
      - obs
    options:
      description: My cool observations
      operationId: optionsObsFeatures
      responses:
        '200':
          description: options response
      summary: Options for Observations items
      tags:
      - obs
  /collections/obs/items/{featureId}:
    get:
      description: My cool observations
      operationId: getObsFeature
      parameters:
      - $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      - $ref: '#/components/parameters/crs'
      - $ref: '#/components/parameters/f'
      - $ref: '#/components/parameters/lang'
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Observations item by id
      tags:
      - obs
    options:
      description: My cool observations
      operationId: optionsObsFeature
      parameters:
      - $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      responses:
        '200':
          description: options response
      summary: Options for Observations item by id
      tags:
      - obs
  /collections/obs/queryables:
    get:
      description: My cool observations
      operationId: getObsQueryables
      parameters:
      - *id001
      - *id002
      responses:
        '200':
          $ref: '#/components/responses/Queryables'
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '404':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Observations queryables
      tags:
      - obs
  /conformance:
    get:
      description: API conformance definition
      operationId: getConformanceDeclaration
      parameters:
      - $ref: '#/components/parameters/f'
      - $ref: '#/components/parameters/lang'
      responses:
        '200':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/LandingPage
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        '500':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: API conformance definition
      tags:
      - server
  /jobs:
    get:
      description: Retrieve a list of jobs
      operationId: getJobs
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/NotFound.yaml
        default:
          $ref: '#/components/responses/default'
      summary: Retrieve jobs list
      tags:
      - jobs
  /jobs/{jobId}:
    delete:
      description: Cancel / delete job
      operationId: deleteJob
      parameters:
      - &id003
        description: job identifier
        in: path
        name: jobId
        required: true
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/NotFound.yaml
        default:
          $ref: '#/components/responses/default'
      summary: Cancel / delete job
      tags:
      - jobs
    get:
      description: Retrieve job details
      operationId: getJob
      parameters:
      - *id003
      - $ref: '#/components/parameters/f'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/NotFound.yaml
        default:
          $ref: '#/components/responses/default'
      summary: Retrieve job details
      tags:
      - jobs
  /jobs/{jobId}/results:
    get:
      description: Retrive job resiults
      operationId: getJobResults
      parameters:
      - *id003
      - $ref: '#/components/parameters/f'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/NotFound.yaml
        default:
          $ref: '#/components/responses/default'
      summary: Retrieve job results
      tags:
      - jobs
  /openapi:
    get:
      description: This document
      operationId: getOpenapi
      parameters:
      - $ref: '#/components/parameters/f'
      - $ref: '#/components/parameters/lang'
      - description: UI to render the OpenAPI document
        explode: false
        in: query
        name: ui
        required: false
        schema:
          default: swagger
          enum:
          - swagger
          - redoc
          type: string
        style: form
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: https://schemas.opengis.net\ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        default:
          $ref: '#/components/responses/default'
      summary: This document
      tags:
      - server
  /processes:
    get:
      description: Processes
      operationId: getProcesses
      parameters:
      - $ref: '#/components/parameters/f'
      responses:
        '200':
          $ref: https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ProcessList.yaml
        default:
          $ref: '#/components/responses/default'
      summary: Processes
      tags:
      - server
  /processes/hello-world:
    get:
      description: An example process that takes a name as input, and echoes it back
        as output. Intended to demonstrate a simple process with a single literal
        input.
      operationId: describeHello-worldProcess
      parameters:
      - $ref: '#/components/parameters/f'
      responses:
        '200':
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/default'
      summary: Get process metadata
      tags:
      - hello-world
  /processes/hello-world/execution:
    post:
      description: An example process that takes a name as input, and echoes it back
        as output. Intended to demonstrate a simple process with a single literal
        input.
      operationId: executeHello-worldJob
      requestBody:
        content:
          application/json:
            example:
              inputs:
                message: An optional message.
                name: World
            schema:
              $ref: https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/execute.yaml
        description: Mandatory execute request JSON
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '201':
          $ref: https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ExecuteAsync.yaml
        '404':
          $ref: https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/NotFound.yaml
        '500':
          $ref: https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ServerError.yaml
        default:
          $ref: '#/components/responses/default'
      summary: Process Hello World execution
      tags:
      - hello-world
  /stac:
    get:
      description: SpatioTemporal Asset Catalog
      operationId: getStacCatalog
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/default'
      summary: SpatioTemporal Asset Catalog
      tags:
      - stac
servers:
- description: pygeoapi provides an API to geospatial data
  url: http://localhost:5000
tags:
- description: pygeoapi provides an API to geospatial data
  externalDocs:
    description: information
    url: https://example.org
  name: server
- description: Process jobs
  name: jobs
- description: SpatioTemporal Asset Catalog
  name: stac
- description: My cool observations
  name: obs
- description: lakes of the world, public domain
  name: lakes
- description: MapServer demo WMS world map
  name: mapserver_world_map
- description: Global Deterministic Prediction System sample
  name: gdps-temperature
- description: Sample metadata records from open.canada.ca
  name: canada-metadata
- description: An example process that takes a name as input, and echoes it back as
    output. Intended to demonstrate a simple process with a single literal input.
  name: hello-world

